// This file contains material supporting section 3.7 of the textbook:
// "Object Oriented Software Engineering" and is issued under the open-source
// license found at www.lloseng.com 

import java.io.*;
import client.*;
import common.*;

/**
 * This class constructs the UI for a chat client.  It implements the
 * chat interface in order to activate the display() method.
 * Warning: Some of the code here is cloned in ServerConsole 
 *
 * @author Fran&ccedil;ois B&eacute;langer
 * @author Dr Timothy C. Lethbridge  
 * @author Dr Robert Lagani&egrave;re
 * @version July 2000
 */
public class ClientConsole implements ChatIF 
{
  //Class variables *************************************************
  
  /**
   * The default port to connect on.
   */
  final public static int DEFAULT_PORT = 5555;
  
  //Instance variables **********************************************
  
  /**
   * The instance of the client that created this ConsoleChat.
   */
  private static ChatClient client;

  private String host;
  private int port;
  //Constructors ****************************************************

  /**
   * Constructs an instance of the ClientConsole UI.
   *
   * @param host The host to connect to.
   * @param port The port to connect on.
   */
  public ClientConsole(String host,int loginid, int port) 
  {
	//this.host = host;
	//this.port = port;
	//this.loginid = loginid;
    try 
    {
      client= new ChatClient(host, port, loginid, this);
    } 
    catch(IOException exception) 
    {
      System.out.println("Error: Can't setup connection!"
                + " Terminating client.");
      System.exit(1);
    }
  }

  
  //Instance methods ************************************************
  
  /**
   * This method waits for input from the console.  Once it is 
   * received, it sends it to the client's message handler.
   */
  public void accept() 
  {
    try
    {
      BufferedReader fromConsole = 
        new BufferedReader(new InputStreamReader(System.in));
      String message;
	
      while (true) 
      {
        message = fromConsole.readLine();
        client.handleMessageFromClientUI(message);
		if(!client.isConnected()){
			System.out.println("WARNING - Server has stopped listening for connections");
		}
		if(message.equals("#quit")){
			client.quit();	
		}
		else if(message.equals("#logoff")){
			System.out.println("Connection closed");
			client.sendToServer(client.loginid + " has disconnected");
			client.closeConnection();
		}
		else if(message.equals("#sethost " + host)){
			if(!client.isConnected()){
				String[] newHost = message.split(" ");
				client.setHost(newHost[1]);
			}
			else{
				System.out.println("Already connected");
			}
			
		}
		else if(message.equals("#setport " + port)){
			if(!client.isConnected()){
				String[] newPort = message.split(" ");
				System.out.println("port set to " + newPort[1] );
				client.setPort(Integer.parseInt(newPort[1]));
				
			}
			else{
				System.out.println("Already connected");
			}
			
		}
		else if (message.equals("#login"))
		{
			if(!client.isConnected()){
				client.openConnection();
			}
			else{
				System.out.println("Already connected");
			}
			
		}
		else if(message.equals("#gethost")){
			System.out.println("The current host is " + client.getHost());
		}
		else if(message.equals("#getport")){
			System.out.println("The current port is " + client.getPort());
		}
		
      }
    } 
    catch (Exception ex) 
    {
      System.out.println
        ("Unexpected error while reading from console!");
    }
	
  }

  /**
   * This method overrides the method in the ChatIF interface.  It
   * displays a message onto the screen.
   *
   * @param message The string to be displayed.
   */
  public void display(String message) 
  {
    System.out.println("> " + message);
  }

  
  //Class methods ***************************************************
  
  /**
   * This method is responsible for the creation of the Client UI.
   *
   * @param args[0] The host to connect to.
   */
  //E7
  public static void main(String[] args) 
  {
    String host = "";
    int port = 0;  //The port number
	int loginID;
	//a)
	try{
		loginID = Integer.parseInt(args[0]);
		System.out.println("Cannot open connection. Awaiting command");
	}
			
	catch(ArrayIndexOutOfBoundsException e){
		loginID = 555;
		System.out.println("ERROR-No login ID specified. Connection aborted.");
		System.exit(1);
	}
    try
    {
      host = args[1];
    }
    catch(ArrayIndexOutOfBoundsException e)
    {
      host = "localhost";
		
    }
	//b)
	try{
		port = Integer.parseInt(args[2]);	
    }
	catch(Exception e){
		port = DEFAULT_PORT;
	}
	ClientConsole chat= new ClientConsole(host, loginID, DEFAULT_PORT);
	/*
	try{
		client.sendToServer("#login ");
	}
	catch(IOException e){
		System.out.println("Failed to send to server");
	}
	*/
    chat.accept();  //Wait for console data

  }
    
}
//End of ConsoleChat class
